# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  desc "Generate new localized screenshots"
  lane :screenshots do
    capture_screenshots(scheme: "SnaptakeUITests")
  end

  desc "Generate new localized videos"
  lane :videos do |options|

      ### RECORDING VIDEOS

      # Delete all existing videos
      mp4_file_paths = Find.find('screenshots').select { |p| /.*\.mp4$/ =~ p}
      for mp4_file_path in mp4_file_paths
        File.delete(mp4_file_path)
      end

      # Ensure that caching folder for screenshots and recording flags exists
      Dir.mkdir(File.expand_path('~/Library/Caches/tools.fastlane/screenshots')) unless Dir.exist?(File.expand_path('~/Library/Caches/tools.fastlane/screenshots'))

      # Setup listeners for starting and ending recording
      fastlane_require 'listen'
      path = nil
      process = nil
      trimming_time_dictionary = {}
      recordingListener = Listen.to(File.expand_path('~/Library/Caches/tools.fastlane/screenshots'), only: /\.txt$/) do |modified, added, removed|
        if (!added.empty?) && File.basename(added.first) == 'recordingFlag.txt'
          recording_flag_path = added.first
          path = File.read(recording_flag_path)
          process = IO.popen("xcrun simctl io booted recordVideo '#{path}'") # Start recording of current simulator to path determined in recordingFlag.txt
        end
        if (!removed.empty?) && File.basename(removed.first) == 'recordingFlag.txt'
          pid = process.pid
          Process.kill("INT", pid) # Stop recording by killing process with id pid
          trimming_flag_path = File.expand_path('~/Library/Caches/tools.fastlane/screenshots/trimmingFlag.txt')
          trimming_time = File.read(trimming_flag_path)
          trimming_time_dictionary[path] = trimming_time # Storing trimming time determined in trimmingFlag.txt for recorded video (necessary due to initial black simulator screen after starting recording)
        end
      end

      # Build SnaptakeUITests and Snaptake and run UITests
      recordingListener.start
      sh("cd .. && fastlane snapshot --concurrent_simulators false && cd fastlane")
      recordingListener.stop

      ### EDIT VIDEOS
      
      sleep(3)

      # Trim videos and reencode
      mp4_file_paths = Find.find('screenshots').select { |p| /.*\.mp4$/ =~ p}
      for mp4_file_path in mp4_file_paths
        
        trimmed_path = mp4_file_path.chomp('.mp4') + '-trimmed.mp4'
        trimming_time = trimming_time_dictionary[mp4_file_path]
        sh("ffmpeg -ss '#{trimming_time}' -i '#{mp4_file_path}' -c:v copy -r 30 '#{trimmed_path}'") # Trimming the Beginning of the Videos
        File.delete(mp4_file_path)

        final_path = trimmed_path.chomp('-trimmed.mp4') + '-final.mp4'
        sh("ffmpeg  -i '#{trimmed_path}' -ar 44100 -ab 256k -r 30 -crf 22 -profile:v main -pix_fmt yuv420p -y -max_muxing_queue_size 1000 '#{final_path}'")
        File.delete(trimmed_path)
      end

  end

end
